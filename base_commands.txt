crtmqm - создание менеджера очередей
crtmqm -q host1/qm1 - создание менеджера очередей в конфигурации по умолчанию и сустановка его менеджером очередей по умолчанию (-q) на данном компьютере
dspmq -проверка на создание менеджера очередей
amqmdain/strmqm - запуск менеджера очередей по умолчанию
amqmdain qmgr start - команда позволяет запустить менеджер очередей так, чтобы при выходе из системы и входе в нее он не останавливался (windows)
strmqm - команда позволяет запустить менеджер очередей так, чтобы при выходе из системы и входе в нее он не останавливался (linux)
vi /var/mqm/mqs.ini >> DefaultQueueManager: \n Name=host1/qm1 - сделать текущий менеджер сообщений, менеджером сообщений по умолчанию

Создание локальной очереди:
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
DEFINE QLOCAL('queue1') + DESCR('Redbook example queue1: Newly defined') - команда для создания очереди
DEFINE QLOCAL('queue1') REPLACE + DESCR('Redbook example queue1: Newly defined') - команда для создания (замены) очереди
END - Выйти из интерактивного сеанса MQSC

Отображение атрибутов новой очереди:
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
DISPLAY QLOCAL(*) - выведите список объектов локальных очередей
DISPLAY QLOCAL('queue1') ALL - просмотр всех атрибутов данной очереди
DISPLAY QLOCAL('queue1') DEFPSIST DESCR CURDEPTH - вывод атрибутов, как постоянство по умолчанию, описание и текущая длина очереди
DISPLAY QUEUE(*) - отображает все объекты очередей, определенные в менеджере очередей
END

Модификация атрибутов объектов очереди:
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
ALTER QLOCAL('queue1') + DESCR('Redbook example queue1: Altered description') - изменение атрибута с описанием очереди
DISPLAY QLOCAL('queue1') DESCR - вывод обновленного атрибута очереди
END

Добавление тестовых сообщений в очередь:
#Примечание Путь к каталогу с примерами программ для WebSphere MQ должен быть добавлен к пути поиска в переменных окружения ОС.
amqsput queue1 - 
Sample AMQSPUT0 start
target queue is queue1

Просмотр сообщений добавленных в очередь (без их удаления):
amqsbcg queue1 > queue1.txt - просмотр сообщений очереди с выводом в queue1.tx
# MsgType : 8 - Тип 8 соответствует дейтаграммам. Запросы имеют тип 1, ответы – 2, отчеты – 4.
# Persistence : 0 - Значение "0" свидетельствует о том, что сообщение является непостоянным, а значение "1", напротив, говорит о том, что это сообщение является постоянным.
# ReplyToQ : ' ' - В этом поле отображается 48-значное имя очереди ответов (reply-to queue). Если в имени меньше 48 символов, недостающие символы заменяются пробелами, расположенными справа. Такие данные # называются дополненными пробелами (blankpadded), они часто используются в структурах WebSphere MQ. В этом примере данное поле в дескрипторе сообщений пусто.
# ReplyToQMgr : 'host1/qm1 ' - Это поле содержит 48-значное дополненное пробелами имя менеджера очереди ответов (reply-to queue manager), оно автоматически заполняется менеджером очередей при размещении # # сообщения.

# **** Message ****
# length – 20 bytes
# 00000000: 5265 6462 6F6F 6B20 7465 7374 206D 6573   'Redbook test mes'
# 00000010: 7361 6765                     'sage '
# Здесь отображается содержимое сообщения в двоичном и (справа) в текстовом представлении

Определение и использование псевдонимов локальных очередей:
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
DEFINE QALIAS('queue1.persistent') TARGQ('queue1') DEFPSIST(YES) +
DESCR('Redbook example alias to queue1: For persistent messages')

DISPLAY QALIAS('queue1.persistent') TARGQ DEFPSIST DESCR - проверка атрибутов объекта псевдонима очереди
END
amqsput queue1.persistent -  добавление тестовых сообщений через псевдоним с помощью программы-примера (передача пустой строки вызывает завершение программы)

Завершение и перезапуск менеджера очередей:
endmqm -w host1/qm1 - команда завершает менеджер очередей, вызывая его "плавную" остановку
endmqm -i host1/qm1 - команда немедленно останавливает менеджер очередей
amqmdain qmgr start - перезапуск менеджера очередей в Windows
strmqm - перезапуск менеджера очередей в UNIX

Извлечение сообщений из очереди (сообщения удаляются):
amqsget queue1 - извлечение всех сообщений из менеджера сообщений по умолчанию

Удаление объекта из очереди:
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
DELETE QALIAS('queue1.persistent') - удаление объекта очереди
# Объект больше не отображается командами DISPLAY QUEUE(*) и DISPLAY QALIAS(*)

Создание псевдонима для менеджера очередей с использованием объекта удаленной очереди^
runmqsc - запуск интерактивного сеанса MQSC менеджера сообщений по умолчанию
DEFINE QREMOTE('host1/qm1.alias') RNAME('') RQMNAME('host1/qm1') + DESCR('Redbook example queue manager alias to host1/qm1')

DISPLAY QREMOTE('host1/qm1.alias') RNAME RQMNAME DESCR - проверка атрибута объекта удаленной очереди, представляющего псевдоним менеджера очередей

Указание менеджера очередей при обращении к очереди:
amqsput queue1 host1/qm1 8208 0 host1/qm1.alias - добавление несколько сообщений в очередь
# queue1 – имя очереди;
# host1/qm1 – имя менеджера очередей, к которому подключаются для отправки сообщений;
# 8208 – десятичный код параметров запроса, который должен быть передан при вызове MQOPEN (для данного примера это не важно). Такой вызов заставляет открыть очередь сообщений для записи с целью добавления в нее сообщений и приводит к неудаче последующие попытки добавить сообщения, если менеджер очередей находится в процессе "плавной остановки");
# 0 – код, определяющий вызов MQCLOSE без параметров (не важно для данного примера);
# host1/qm1.alias – имя объекта менеджера очередей, заданное при вызове MQOPEN (дополнительный параметр, используемый в этом примере). Оно соответствует ранее объявленному псевдониму менеджера очередей, а не менеджеру очередей, к которому приложение подключено напрямую. Механизм разрешения имен очередей преобразует эту ссылку в имя локального менеджера очередей ( host1/qm1 ) через псевдоним менеджера очередей.

Удаление менелжера очередеей:
endmqm -w host1/qm1 - остановка менеджера очередей
dltmqm host1/qm1 - удаление менеджера очередей

Создание и запуск менеджера очередей – основы службы:
# Ниже показано, как создать менеджер очередей host1/echo.hub, который выступит в роли основы для службы, которая возвращает в составе ответа текст, пришедший в составе запроса.
crtmqm host1/echo.hub - создание менеджера очередей не делаея его менеджером очередей по умолчанию
amqmdain qmgr start host1/echo.hub - запуск менеджера очередей в Windows
strmqm host1/echo.hub - запус менеджера очередей в Unix
# Создание очереди-основы службы
DEFINE QLOCAL('echo') + DESCR('Queue hosting the echo service') - создание  объекта локальной очереди

Ручное объявление очереди ответов:
# Ниже рассказывается, как вручную создать объект локальной очереди, которую запрашивающее приложение будет использовать для получения ответов. Это делается с использованием WebSphere MQ Explorer либо команд MQSC. Атрибуты очереди ответов имеют значения по умолчанию.
runmqsc host1/echo.hub - запуск менеджера очередей в интерактивном формате
DEFINE QLOCAL('echo.replies.manual') + DESCR('Manually defined reply-to queue for echo service')
END

Добавление и анализ тестового запрос:
#Ниже рассказывается, как добавить тестовое сообщение с запросом. Также вы узнаете, как изучить это сообщение, чтобы понять его отличие от сообщения-дейтаграммы. Для этого вы воспользуетесь программами-примерами WebSphere MQ. О просмотре очередей см. в "Обмен сообщениями с использованием WebSphere MQ: практическое введение" .
amqsreq echo host1/echo.hub echo.replies.manual - вызывает одноименную программу–пример WebSphere MQ
# echo – имя очереди-основы службы, предоставляющей интерфейс запрос-ответ; в настоящее время активных служб, обрабатывающих сообщения в этой очереди, нет;
# host1/echo.hub – имя менеджера очередей, к которому подключается запрашивающее приложение;
# echo.replies.manual – имя очереди ответов, которое запрашивающее приложение указывает в дескрипторах сообщений с запросами; запрашивающее приложение ожидает поступления ответов в эту очередь.

Очистка очереди-основы службы:
CLEAR QLOCAL('echo') - Выполните следующую команду MQSC в отношении менеджера host1/echo.hub:

Создание определения процесса для службы:
DEFINE PROCESS('amqsech') + DESCR('The amqsech WebSphere MQ sample program') + APPLTYPE(WINDOWSNT) + APPLICID('C:\Program Files\IBM\WebSphere MQ\Tools\c\samples\bin\amqsech.exe') - Windows
DEFINE PROCESS('amqsech') + DESCR('The amqsech WebSphere MQ sample program') + APPLTYPE(UNIX) APPLICID('/opt/mqm/samp/bin/amqsech') - Unux
DISPLAY PROCESS('amqsech') -  просмотр атрибутов объекта определения процесса

Создание очереди инициации:
# Ниже рассказывается, как создать локальную очередь с атрибутами по умолчанию, которая впоследствии станет очередью инициации, принимающей триггерные сообщения для очереди echo.
DEFINE QLOCAL('echo.initq') + DESCR('Initiation queue for triggering the echo service')

Активация триггера для очереди-основы службы:
# В данном примере используется триггер типа first, генерирующий триггерное сообщение при поступлении в очередь первого сообщения.
# Выполните следующую команду MQSC в отношении менеджера host1/echo.hub:
ALTER QLOCAL('echo') + TRIGGER TRIGTYPE(FIRST) INITQ('echo.initq') + PROCESS('amqsech')

DISPLAY QLOCAL('echo') TRIGGER TRIGTYPE INITQ PROCESS - проверка атрибута объекта очереди

Запуск триггерного монитора WebSphere MQ:
# Выполните следующую команду, чтобы запустить триггерный монитор WebSphere MQ для менеджера очередей host1/echo.hub и очереди инициации echo.initq:
runmqtrm -m host1/echo.hub -q echo.initq
